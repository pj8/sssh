#!/bin/bash

set -eu

params(){
  echo "$(profileParam) $(regionParam)"
}

profileParam() {
  [[ $profile ]] &>/dev/null && echo "--profile $profile"
}

regionParam() {
  [[ $region ]] &>/dev/null && echo "--region $region"
}

colorEcho(){
  red='\033[0;31m'
  green='\033[0;32m'
  yellow='\033[0;33m'
  reset='\033[0m'

  if echo $@ | egrep -q "prd|prod|production"; then
    color=$red
  elif echo $@ | egrep -q "stg|stage|staging|beta|devo"; then
    color=$yellow
  else
    color=$green
  fi

  echo -e "${color}$@${reset}"
}

echo_stderr() {
  echo -e "$@" >&2
}

die() {
  echo_stderr "$@"
  exit 1
}

function print_help() {
  cat >&2 <<-END
This script simplifies the process of getting the required information to drop into an
interactive shell script on your container hosted on Fargate/ECS.
Example:
./sssh --region us-west-2
./sssh --profile default
Supported input parameters:
 -r | --region      : AWS Region to fetch the cluster, service, task
 -p | --profile     : AWS Profile for credentials and region.
 -c | --command     : Command to execute, defaults to '/bin/sh'/
      --remote-host : Remote host name for port forward.
      --remote-port : Remote port number for port forward.
      --local-port  : Local port number for port forward.

The default command executed on the selected container is '/bin/sh'.
If a region is not provided, the script will attempt to use your region set in the profile.
If you want to execute a different command or shell, you can pass it in like so:
./sssh --command '/bin/bash'
You need active (unexpired) AWS credentials, otherwise, the script will crash.
END
}

main(){
  command='/bin/sh'
  while [[ "$#" -gt 0 ]]; do
    case $1 in
      -h|--help)
        print_help
        exit
        ;;
      -v|--version)
        echo "sssh version v4.0.0"
        exit
        ;;
      -r|--region)
        shift
        region="${1:?Region must be specified in --region}"
        shift
        ;;
      -p|--profile)
        shift
        profile="${1:?Profile must be specified in --profile}"
        shift
        ;;
      -o|--otp)
        shift
        otp="${1:?OTP must be specified in --otp}"
        shift
        ;;
      -c|--command)
        shift
        command="${1:?Command must be specified in --command}"
        shift
        ;;
      --remote-host)
        shift
        remoteHost="${1:?remote-host must be specified in --remote-host}"
        shift
        ;;
      --remote-port)
        shift
        remotePort="${1:?remote-port must be specified in --remote-port}"
        shift
        ;;
      --local-port)
        shift
        localPort="${1:?local-port must be specified in --local-port}"
        shift
        ;;
      *)
        die "Unknown param $1"
        ;;
    esac
  done

  date

  echo_stderr "Select AWS Profile"
  if [ -z ${profile+x} ]; then
    profile=$(aws configure list-profiles|peco --on-cancel=error --select-1 --prompt="AWS Profile:")
  fi
  colorEcho Profile: $profile
  echo_stderr

  echo_stderr "Select cluster."
  if [ -z ${otp:-} ]; then
    cluster=$(aws ecs list-clusters $(params)|jq -r ".clusterArns[]"|sort|cut -d "/" -f 2|peco --on-cancel=error --select-1 --prompt="Cluster:")
  else
    script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
    params_result=$(params)
    clusters=$("$script_dir/list-clusters.expect" "$params_result" "${otp:-}" | tail -n +2)
    temp_file=$(mktemp)
    echo "[" > $temp_file
    echo "$clusters" | grep -e 'arn:aws:ecs' | tr -d '\r' | sed -e 's/\r//g' -e 's/\x1B\[[0-9;]*[a-zA-Z]//g' -e 's/\^\[\[[?][0-9]*[hl]//g' -e 's/\^\[[=>]//g' -e 's/\^\[\[m//g' >> $temp_file
    echo "]" >> $temp_file
    cluster=$(cat $temp_file | jq -r ".[]" | sort | cut -d "/" -f 2 | peco --on-cancel=error --select-1 --prompt="Cluster:")
  fi
  colorEcho Cluster: $cluster
  echo_stderr

  echo_stderr "Select service."
  service=$(aws ecs list-services $(params) --cluster $cluster|jq -r ".serviceArns[]"|sort|peco --on-cancel=error --select-1 --prompt="Service:")
  colorEcho Service: $service
  echo_stderr

  echo_stderr "Select task."
  task=$(aws ecs list-tasks $(params) --cluster $cluster --service-name $service --desired-status RUNNING |jq -r '.taskArns[]'|sort|peco --on-cancel=error --select-1 --prompt="Task:")
  colorEcho Task: $task
  echo_stderr

  echo_stderr "Select container."
  container=$(aws ecs describe-tasks $(params) --cluster $cluster --tasks $task | jq -r ".tasks[].containers[].name"|sort|peco --on-cancel=error --select-1 --prompt="Container:")
  colorEcho Container: $container
  echo_stderr

  # None of the remotePort, localPort, remoteHost parameters are supplied.
  if [ -z ${remotePort+x} ] && [ -z ${localPort+x} ] && [ -z ${remoteHost+x} ]; then
    cmd="aws ecs execute-command $(params) --cluster $cluster --container $container --task $task --interactive --command '$command'"
  else
    taskId=$(echo $task | awk -F '/' '{print $3}')
    containerId=$(aws ecs describe-tasks $(params) --cluster $cluster --task $task | jq -r --arg container $container '.tasks[0].containers[] | select(.name == $container).runtimeId')
    cmd="aws ssm start-session $(params) --target ecs:${cluster}_${taskId}_${containerId} --document-name AWS-StartPortForwardingSessionToRemoteHost --parameters {\"host\":[\"${remoteHost:-"127.0.0.1"}\"],\"portNumber\":[\"${remotePort:-"3306"}\"],\"localPortNumber\":[\"$localPort\"]}"
  fi

  colorEcho $cmd
  $cmd
}

# Execute main function and pass all params over
main $@
